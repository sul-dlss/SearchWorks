require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TagsController do

  # This should return the minimal set of attributes required to create a valid
  # Tag. As you add validations to Tag, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { :motivatedBy => 'bookmarking' } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TagsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context "GET index" do
    it 'does something' do
      pending "need to implement Tag.all for a target"
    end
    it "assigns all tags as @tags" do
      pending "not sure that this will be relevant"
      tag = Tag.create valid_attributes
      get :index, {}, valid_session
      assigns(:tags).should eq([tag])
    end
  end

  describe "GET show" do
    it "assigns the requested tag as @tag" do
      tid = "2155d7f5-cd79-435f-ab86-11f1e246d3ce"
      ttl = '<https://triannon-dev.stanford.edu/annotations/2155d7f5-cd79-435f-ab86-11f1e246d3ce> a <http://www.w3.org/ns/oa#Annotation>;
               <http://www.w3.org/ns/oa#hasBody> [
                 a <http://purl.org/dc/dcmitype/Text>,
                   <http://www.w3.org/2011/content#ContentAsText>,
                   <http://www.w3.org/ns/oa#Tag>;
                 <http://purl.org/dc/terms/format> "text/plain";
                 <http://www.w3.org/2011/content#chars> "blue"
               ];
               <http://www.w3.org/ns/oa#hasTarget> <http://searchworks.stanford.edu/view/666>;
               <http://www.w3.org/ns/oa#motivatedBy> <http://www.w3.org/ns/oa#tagging> .'
      resp = double("resp")
      expect(resp).to receive(:body).and_return(ttl)
      conn = double("conn")
      expect(conn).to receive(:get).and_return(resp)
      expect(Tag).to receive(:conn).and_return(conn)
      get :show, {:id => tid}, valid_session
      assigns(:tag).should be_a LD4L::OpenAnnotationRDF::TagAnnotation
    end
  end

  describe "GET new" do
    it "assigns a new tag as @tag" do
      get :new, {}, valid_session
      assigns(:tag).should be_a_new(Tag)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created tag as @tag" do
        resp = double("resp")
        allow(resp).to receive(:status).and_return(201)
        allow(resp).to receive(:headers).and_return({"Location" => 'somewhere'}).twice
        conn = double("conn")
        allow(conn).to receive(:post).and_return(resp)
        allow_any_instance_of(Tag).to receive(:conn).and_return(conn)
        post :create, {:tag => valid_attributes}, valid_session
        assigns(:tag).should be_a(Tag)
      end
      it 'returns status 201 if tag is successfully created' do
        resp = double("resp")
        allow(resp).to receive(:status).and_return(201)
        allow(resp).to receive(:headers).and_return({"Location" => 'somewhere'}).twice
        conn = double("conn")
        allow(conn).to receive(:post).and_return(resp)
        allow_any_instance_of(Tag).to receive(:conn).and_return(conn)
        post :create, {:tag => valid_attributes}, valid_session
        assigns(:tag)
        expect(response.status).to eq 201
      end
      it "sends a flash message if successfully created" do
        resp = double("resp")
        allow(resp).to receive(:status).and_return(201)
        allow(resp).to receive(:headers).and_return({"Location" => 'somewhere'}).twice
        conn = double("conn")
        allow(conn).to receive(:post).and_return(resp)
        allow_any_instance_of(Tag).to receive(:conn).and_return(conn)
        post :create, {:tag => valid_attributes}, valid_session
        assigns(:tag)
        expect(flash[:notice]).to eq 'Tag was successfully created.'
      end
      it "returns status 500 if tag isn't successfully created" do
        resp = double("resp")
        allow(resp).to receive(:status).and_return(403)
        conn = double("conn")
        allow(conn).to receive(:post).and_return(resp)
        allow_any_instance_of(Tag).to receive(:conn).and_return(conn)
        post :create, {:tag => valid_attributes}, valid_session
        assigns(:tag)
        expect(response.status).to eq 500
      end
      it "sends a flash message if problem creating tag" do
        resp = double("resp")
        allow(resp).to receive(:status).and_return(403)
        conn = double("conn")
        allow(conn).to receive(:post).and_return(resp)
        allow_any_instance_of(Tag).to receive(:conn).and_return(conn)
        post :create, {:tag => valid_attributes}, valid_session
        assigns(:tag)
        expect(flash[:alert]).to eq 'There was a problem creating the Tag.'
      end
      
      it "redirects to the created tag" do
        pending "not sure that this will be relevant"
        post :create, {:tag => valid_attributes}, valid_session
        response.should redirect_to(Tag.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved tag as @tag" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tag.any_instance.stub(:save).and_return(false)
        post :create, {:tag => {  }}, valid_session
        assigns(:tag).should be_a_new(Tag)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tag.any_instance.stub(:save).and_return(false)
        post :create, {:tag => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

end
